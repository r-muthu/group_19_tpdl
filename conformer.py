import torch
from torchaudio.models import Conformer

class StatPool(torch.nn.Module):
    """
    implements mean and std pooling per sli conformer architecture proposal.
    """
    def forward(self, x):
        mean = x.mean(dim=1)
        std = x.std(dim=1)
        return torch.cat((mean, std), dim=-1)

class FeiJiNet(torch.nn.Module):

    def __init__(self, classes: int, bin_height: int=128, dropout: float=0.1):
        super(FeiJiNet, self).__init__()
        self.conformer = Conformer(bin_height, 8, 512, 18, 31, dropout=dropout, use_group_norm=True, convolution_first=True)
        self.pooling = StatPool()
        self.fc1 = torch.nn.Linear(bin_height * 2, 256)
        self.fc2 = torch.nn.Linear(256, classes)

    def forward(self, x):
        """
        expects input of dimensions (batch_size, time_steps, input_dim).
        fyi our input_dim is 128 for the spectrograms generated by preprocessing.
        use Tensor.permute(0, 2, 1) to get this format.
        do not unsqueeze inputs; no channel dimension is expected.
        """
        lengths = torch.tensor([spec.shape[0] for spec in x], dtype=torch.long)

        conf, _ = self.conformer(x, lengths)
        conf = self.pooling(conf)

        clas = self.fc1(conf)
        clas = self.fc2(conf)
        return clas
